<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CÃ©dric Champeau's blog</title>
    <link>https://melix.github.io/blog/</link>
    <atom:link href="https://melix.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Wed, 17 Jun 2020 09:47:16 +0200</pubDate>
    <lastBuildDate>Wed, 17 Jun 2020 09:47:16 +0200</lastBuildDate>

    <item>
      <title>Configuring git to use main instead of master</title>
      <link>https://melix.github.io/blog/2020/06/updating-git.html</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2020/06/updating-git.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t need to explain the backstory, and I am not interested in a discussion whether this change makes sense or not, nor am I interested in the technical problems it could cause if someone changes the name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Actually, if you are reading this, there are good chances you&amp;#8217;re already in the mindset of removing potentially offensive language from your project, thank you!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact is, we have better, more descriptive technical names than &quot;master&quot; and &quot;slave&quot; and we don&amp;#8217;t have to use terms which refer to dark ages of our history, so let&amp;#8217;s get rid of them in tech.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, you will learn:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;how to make &lt;code&gt;git init&lt;/code&gt; create your project with a &lt;code&gt;main&lt;/code&gt; branch instead of &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to rename your &lt;code&gt;master&lt;/code&gt; branch to &lt;code&gt;main&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to make the change on GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be aware that renaming branches may break your existing integrations (typically with CI or Slack notifications) so only do it when you&amp;#8217;re ready.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuring_git_init&quot;&gt;Configuring git init&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, when you create a new project, &lt;code&gt;git init&lt;/code&gt; will create a &lt;code&gt;master&lt;/code&gt; branch.
There&amp;#8217;s no option in &lt;code&gt;git init&lt;/code&gt; to change this, but it&amp;#8217;s actually quite easy to set it up differently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, in your &lt;code&gt;~/.gitconfig&lt;/code&gt; file, add the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.gitconfig&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;[init]
    templateDir = ~/.config/git/template/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then create, if it doesn&amp;#8217;t exist, the following directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;mkdir ~/.config/git/template&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;next create this file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;~/.config/git/template/HEAD&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ref: refs/heads/main&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(don&amp;#8217;t forget to add a new line at the end of the first line)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting from now, calling &lt;code&gt;git init&lt;/code&gt; will create a &lt;code&gt;main&lt;/code&gt; branch instead of &lt;code&gt;master&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s deal with existing projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_renaming_your_master_branch&quot;&gt;Renaming your master branch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For your current projects, you may want to rename the &lt;code&gt;master&lt;/code&gt; branch to &lt;code&gt;main&lt;/code&gt;.
This is also single command in &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;git checkout master
git branch -m main&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can push the branch to your remote&amp;#8230; but be careful, it will create a &lt;em&gt;new branch&lt;/em&gt; on the remote:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;git push origin main&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuring_github_to_use_code_main_code_instead_of_code_master_code&quot;&gt;Configuring GitHub to use &lt;code&gt;main&lt;/code&gt; instead of &lt;code&gt;master&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you&amp;#8217;ve pushed your new branch, you need to tell GitHub that this is your new &quot;main branch&quot;.
To do this, go to &lt;code&gt;Settings&lt;/code&gt; &amp;#8594; &lt;code&gt;Branches&lt;/code&gt; and select your new branch as the main one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/img/github-branch.png&quot; alt=&quot;github branch&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, you need to delete the old branch from GitHub, which can be done by calling this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;git push origin :master&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Using Java feature previews with Gradle</title>
      <link>https://melix.github.io/blog/2020/06/java-feature-previews-gradle.html</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2020/06/java-feature-previews-gradle.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ve probably heard about Java providing features like &lt;a href=&quot;https://blogs.oracle.com/javamagazine/records-come-to-java&quot;&gt;records&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/en/java/javase/13/text_blocks/index.html&quot;&gt;multi-line text blocks&lt;/a&gt; or &lt;a href=&quot;https://blogs.oracle.com/javamagazine/inside-the-language-sealed-types&quot;&gt;sealed types&lt;/a&gt; and you&amp;#8217;d like to try them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those features are called &lt;em&gt;feature previews&lt;/em&gt; and it means a couple of things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;the Java team wants you to test them and give feedback. They want honest feedback about how it &lt;em&gt;feels&lt;/em&gt; to use them, whether you like them or not. Both ways, feedback is important.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;because they are feature previews, you &lt;em&gt;shouldn&amp;#8217;t&lt;/em&gt; them use in production, but you can play with them for toy projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s actually an important thing about point 2 if you are a &lt;em&gt;library author&lt;/em&gt;: &lt;strong&gt;never, ever publish a library which uses feature previews on Maven Central&lt;/strong&gt;. The reason is that the feature previews &lt;em&gt;leak to consumers&lt;/em&gt;: as soon as &lt;em&gt;you&lt;/em&gt; start using them, any project depending on your code will also have to enable them. This is not a problem for toy projects, it&amp;#8217;s clearly a problem for published libraries. In particular, there are no guarantees that the generated bytecode will be compatible with future Java releases, and there are no guarantees that the feature preview will make it to Java eventually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal of this blog post is not to explain what records or sealed classes are, there&amp;#8217;s already a lot of litterature about it.
Instead, we&amp;#8217;re going to explain how to configure your Gradle build to use feature previews and therefore report issues/bugs to the JDK team.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuring_your_gradle_build&quot;&gt;Configuring your Gradle build&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code in this blog post is available on a &lt;a href=&quot;https://github.com/melix/gradle-java-feature-previews&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, make sure you are using latest Gradle versions.
If you use the repository above, the Gradle wrapper will make sure that you do.
Gradle 6.5, for example, works perfectly fine with Java 14 and even Java 15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that you want to compile the following record:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;public record Person(
        String firstName,
        String lastName,
        boolean likeJavaRecords) {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And execute this test:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;class PersonTest {
    @Test void testRecord() {
        Person cedric = new Person(&quot;CÃ©dric&quot;, &quot;Champeau&quot;, true);
        Person otherCedric = new Person(&quot;CÃ©dric&quot;, &quot;Champeau&quot;, true);
        assertEquals(cedric, otherCedric);
        assertTrue(cedric.likeJavaRecords());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you need to configure the build to do a couple of things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we need to tell the Java compiler to use feature previews:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint kotlin language-kotlin&quot;&gt;&lt;code&gt;tasks.withType&amp;lt;JavaCompile&amp;gt;().configureEach {
    options.compilerArgs.add(&quot;--enable-preview&quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we need to tell the test runtime to use feature previews:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint kotlin language-kotlin&quot;&gt;&lt;code&gt;tasks.withType&amp;lt;Test&amp;gt;().configureEach {
    useJUnitPlatform()
    jvmArgs(&quot;--enable-preview&quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that&amp;#8217;s it, you can run the build with &lt;code&gt;./gradlew test&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuring_gradle_to_use_a_different_jdk_from_its_own_runtime&quot;&gt;Configuring Gradle to use a different JDK from its own runtime&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually, people use the same JDK version for running Gradle, than they use to compile and execute tests.
It doesn&amp;#8217;t have to be that way, and actually the Gradle team is working on adding support for toolchains to simplify the configuration of builds in this case.
In the mean time, if for some reason your Gradle build doesn&amp;#8217;t want to start on JDK 15, but it works on 14, then you can easily configure Gradle to fork compilation and execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can for example configure the build to use a JDK found externally by specifying an environment variable like in the example below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint kotlin language-kotlin&quot;&gt;&lt;code&gt;providers.environmentVariable(&quot;JDK15&quot;)
        .forUseAtConfigurationTime()
        .map(::File)
        .orNull?.let { javaHome -&amp;gt;
            println(&quot;Configuring your build to use JDK 15 from $javaHome&quot;)
            tasks.withType&amp;lt;Test&amp;gt;().configureEach {
                executable = &quot;${javaHome}/bin/java&quot;
            }

            tasks.withType&amp;lt;JavaCompile&amp;gt;().configureEach {
                options.isFork = true
                options.forkOptions.javaHome = javaHome
                options.compilerArgs.addAll(listOf(&quot;--release&quot;, &quot;15&quot;))
            }
        }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you don&amp;#8217;t have any excuse not to try feature previews!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Mon engagement pour Montaigu-VendÃ©e</title>
      <link>https://melix.github.io/blog/2020/03/mvea2020.html</link>
      <pubDate>Sat, 7 Mar 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2020/03/mvea2020.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai 40 ans et je suis arrivÃ© sur Montaigu voici 17 ans. Comme beaucoup d&amp;#8217;entre nous, c&amp;#8217;est pour des raisons professionnelles que nous y avons emmÃ©nagÃ© avec ma jeune Ã©pouse.
Elle avait trouvÃ© un travail sur Les Herbiers, je travaillais sur Nantes, Montaigu Ã©tait l&amp;#8217;endroit idÃ©al pour nous.
Nous voici en 2020, nous avons 2 grands garÃ§ons, et si notre situation professionnelle a Ã©voluÃ© (nous sommes tous 2 tÃ©lÃ©travailleurs) et que nous aurions pu dÃ©mÃ©nager, nous avons au contraire choisi de faire notre vie ici et sommes attachÃ©s Ã  ce territoire.
Il y a 6 ans, nous quittions notre petit logement sur Montaigu et achetions donc notre maison sur Saint Hilaire de Loulay, en village.
AprÃ¨s presque deux dÃ©cennies passÃ©es ici, aprÃ¨s nos engagements associatifs, nos nouveaux amis ici, il Ã©tait temps, enfin, d&amp;#8217;entrer au service des citoyens de Montaigu-VendÃ©e.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/img/mvea-logo.jpg&quot; alt=&quot;mvea logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_liste_montaigu_vend_e_ensemble_et_autrement&quot;&gt;La liste Montaigu-VendÃ©e Ensemble et Autrement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si le territoire de Montaigu-VendÃ©e est riche et, Ã©conomiquement, le territoire est attractif, il y a beaucoup de choses Ã  amÃ©liorer.
J&amp;#8217;ai choisi de m&amp;#8217;engager sur la liste de &lt;a href=&quot;https://mvea2020.fr&quot;&gt;Vincent MATHIEU&lt;/a&gt; parce que je suis convaincu qu&amp;#8217;une autre voie est possible, basÃ©e sur 3 piliers qui sont aussi chers Ã  mon coeur:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;la transition Ã©cologique, parce que je suis convaincu que c&amp;#8217;est en travaillant au niveau local, en engageant des actions simples Ã  notre niveau que nous feront de ruisseaux de grandes riviÃ¨res&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;la dÃ©mocratie participative, oÃ¹ comment remettre le citoyen au coeur des dÃ©cisions, avoir des Ã©lus au service des citoyens et non l&amp;#8217;inverse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;le mieux vivre ensemble, en prenant en compte &lt;strong&gt;tous&lt;/strong&gt; les habitants, personnes Ã¢gÃ©es, jeunes, personnes en situation de handicap, de tous milieux sociaux et en exploitant notre trÃ¨s actif rÃ©seau associatif&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_transition_ecologique&quot;&gt;La Transition Ecologique&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis particuliÃ¨rement attachÃ© Ã  l&apos;Ã©cologie depuis ma jeunesse.
Lorsque je parle d&apos;Ã©cologie, je prÃ´ne toujours une Ã©cologie pragmatique, pas dogmatique et encore moins Ã©sotÃ©rique.
Je suis pour l&apos;Ã©cologie qui fait avancer les choses dans la concertation, une Ã©cologie qui prend en compte &lt;strong&gt;tous&lt;/strong&gt; les acteurs, entreprises, paysans, citoyens et enfants.
Le 5 mars dernier, nous Ã©tions le &quot;jour du dÃ©rÃ¨glement&quot;, ce jour de basculement oÃ¹ en France, nous commenÃ§ons Ã  produire plus de carbone que l&apos;Ã©cosystÃ¨me peut en absorber.
C&amp;#8217;est dire l&amp;#8217;urgence de la situation, mais l&apos;Ã©cologie ne se limite pas au prisme du rÃ©chauffemenent climatique.
En campagne, il est facile de constater les ravages sur la biodiversitÃ©: en 40 ans, ce sont 60% des espÃ¨ces sauvages qui ont disparu, 40 ans seulement!
Comme le citait Antoine de Saint ExupÃ©ry, &lt;strong&gt;nous n&amp;#8217;hÃ©ritons pas de la terres de nos ancÃªtres, nous empruntons celle de nos enfants&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est ici une diffÃ©rence fondamentale avec la majoritÃ© sortante, qui, soyons clairs, n&amp;#8217;a rien fait pour l&apos;Ã©cologie.
Pire, lorsqu&amp;#8217;elle affirme dans les journaux que Vincent MATHIEU &quot;n&amp;#8217;est pas issu du cru local, ses parents n&amp;#8217;ont pas de pieds de vigne dans le secteur&quot;, nous constatons avec effarement un tel mÃ©pris de notre gÃ©nÃ©ration, des gÃ©nÃ©rations futures, mais aussi des 600 nouveaux habitants qui chaque annÃ©e, arrivent sur notre terroire. 600 habitants, que, au passage, les Ã©lus actuels sont heureux de voir participer Ã  l&amp;#8217;activitÃ© Ã©conomique, heureux d&amp;#8217;avoir pour qu&amp;#8217;il soit, come une fois de plus annoncÃ© dans les journaux, nommÃ© PrÃ©sident d&amp;#8217;une CommunautÃ© d&amp;#8217;AgglomÃ©ration qui n&amp;#8217;existe pas encore (faute d&amp;#8217;habitants suffisants !), mais dont il nie l&amp;#8217;expression de la dÃ©mocratie lorsqu&amp;#8217;ils ne sont pas issus du secteur. Dont acte.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A titre personnel, je suis aussi attachÃ© Ã  la lutte contre la pollution lumineuse.
Je constate, en tant qu&amp;#8217;astronome amateur, la dÃ©gradation du ciel nocture.
Je constate que les gens sont surpris lorsqu&amp;#8217;ils dÃ©couvrent, lors de la manifestation des Etoiles du Lac Ã  La GuyonniÃ¨re (dont l&amp;#8217;existence est menacÃ©e par la majoritÃ© en place), qu&amp;#8217;ils peuvent voir la voie lactÃ©e.
Je constate aussi que nous n&amp;#8217;avons, mÃªme ici en campagne, presque plus de papillons de nuit et que les insectes ont presque tous disparus.
Il s&amp;#8217;agit d&amp;#8217;une catastrophe contre laquelle nous pouvons, tous ensemble, lutter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Que dire de cette majoritÃ©, qui, Ã  l&amp;#8217;heure oÃ¹ l&amp;#8217;on parle de planter des arbres, a rasÃ© tous les arbres de la place de la mairie ? Que dire de cette majoritÃ© qui a coupÃ© les magnifiques cerisiers en fleurs du Boulevard Auguste Durand pour les remplacer par&amp;#8230; du goudron ! Que dire lorsque &lt;strong&gt;tous&lt;/strong&gt; les cours d&amp;#8217;eau du territoire ont leurs indicateurs de qualitÃ© dans le rouge ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alors peut-on faire mieux ? Avec un tel bilan pour la majoritÃ© sortante, Ã§a n&amp;#8217;est pas compliquÃ©.
Je vous invite Ã  lire notre &lt;a href=&quot;https://mvea2020.fr/transition-ecologique.html&quot;&gt;programme sur la transition Ã©cologique&lt;/a&gt;.
J&amp;#8217;insisterai sur ces points:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nous souhaitons aider toutes celles et ceux, entreprises ou particuliers, qui sont prÃªts Ã  s&amp;#8217;engager dans la transition Ã©cologique.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nous favoriserons l&amp;#8217;implantation d&amp;#8217;entreprises vertueuses, et aiderons les entreprises existantes pour qu&amp;#8217;elles rÃ©alisent des Ã©conomies d&apos;Ã©nergie (et donc d&amp;#8217;argent !) et rÃ©duisent leur impact. Ceci passera par la mise en place d&amp;#8217;indicateurs et de mesure du progrÃ¨s tout au long du mandat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nous aiderons les habitants de villages dans la mise au normes de l&amp;#8217;assainissmenent. Des solutions Ã©cologiques et collectives existent, et aujourd&amp;#8217;hui &lt;em&gt;personne&lt;/em&gt; n&amp;#8217;aide ces habitants dans des choix qui sont souvent extrÃªmenent onÃ©reux.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nous favoriserons l&amp;#8217;accueil de nouveaux paysans bio ou 0-pesticide et dÃ©velopperons l&amp;#8217;alimentation collective par l&amp;#8217;approvisionnement local, tel que celÃ  se fait sur la GuyonniÃ¨re&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nous rendrons l&amp;#8217;accÃ¨s Ã  la dÃ©chetterie plus simple et gratuit. Nous mettrons aussi Ã  disposition des outils pour ceux qui ne peuvent pas facilement se dÃ©placer (broyage, compostage, &amp;#8230;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nous dÃ©velopperons et sÃ©curiserons les dÃ©veloppements doux (pistes cyclables, chemins piÃ©tonniers, &amp;#8230;) et mettrons en place des solutions de transport collectif entre les communes dÃ©lÃ©guÃ©es&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_d_mocratie_participative&quot;&gt;La dÃ©mocratie participative&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ah, la belle dÃ©mocratie Montacutaine ! Qui, il y a 6 ans, avait lu qu&amp;#8217;il y aurait fusion des communes dans les programmes ? Qui a Ã©tÃ© consultÃ© pour cette fusion ? Nous avons bel et bien eu une consultation, celle pour choisir le nom de la commune.
D&amp;#8217;ailleurs, nous, habitants, avions choisi &quot;Montaigu Les Maines&quot;, mais nos Ã©lus avaient dÃ©ja choisi Montaigu-VendÃ©e.
Tout, absolument tout sur Montaigu est Ã  cette image: les Ã©lus prennent les dÃ©cisions dans leur coin, et informent les citoyens a posteriori.
Ceci n&amp;#8217;est pas ma vision de la dÃ©mocratie.
MÃªme s&amp;#8217;il fallait faire cette fusion, il Ã©tait nÃ©cessaire d&amp;#8217;en informer et de faire une concertation avec les citoyens.
Nous ne sommes pas dupes, Ã  Montaigu, l&apos;Ã©lu est au service du Maire, ses ambitions personnelles annoncÃ©es par voie de presse, et non le contraire.
Je ne suis mÃªme pas certain qu&amp;#8217;ils se rendent compte de ce qu&amp;#8217;ils font.
Qui, par exemple, a dÃ©ja vu sur l&amp;#8217;affichage public l&amp;#8217;annonce des conseils municipaux ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous souhaitons remettre le citoyen au coeur des dÃ©cisions, et celÃ  se fera en mettant en place des structures adaptÃ©es, participatives: rganisation de conseils municipaux dÃ©lÃ©guÃ©s, composÃ©s pour moitiÃ© d&apos;Ã©lus et pour l&amp;#8217;autre moitiÃ© de citoyens tirÃ©s au sort parmi les volontaires. Il ne s&amp;#8217;agit pas, comme le propose l&amp;#8217;autre liste, de choisir nous mÃªmes les participants, Ã§a n&amp;#8217;est pas notre vision de la dÃ©mocratie: nous souhaitons une vision non partisane des choses !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notre territoire est grand et aussi organisÃ© en villages et quartiers. Il nous semble donc indispensable de reflÃ©ter cet aspect dans les prises de dÃ©cision, avec l&amp;#8217;organisation de comitÃ©s locaux, par thÃ©matique, afin que les riverains puissent prendre part aux dÃ©cisions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est &lt;a href=&quot;https://mvea2020.fr/democratie-participative.html&quot;&gt;temps que le citoyen redevienne le centre de la discussion publique&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_mieux_vivre_ensemble&quot;&gt;Le mieux-vivre ensemble&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il s&amp;#8217;agit encore d&amp;#8217;un point qui me tient particuliÃ¨rement Ã  coeur.
Notre territoire se doit d&apos;Ãªtre accueillant, quelle que soit la population.
Nos Ã©lus, par exemple, on fait le choix de payer des amendes plutÃ´t que de respecter l&amp;#8217;obligation de 20% de logements sociaux.
Ils mettent aussi en place des &quot;nouveaux quartiers&quot; tels que les Hauts de Montaigu, oÃ¹ le ticket d&amp;#8217;entrÃ©e pour une maison de 110m2 et un terrain de 250m2 se situe aux alentours de 250kâ¬ !
Nous pensons que nous pouvons, que nous &lt;strong&gt;devons&lt;/strong&gt; faire autrement: crÃ©ation d&apos;Ã©co-quartiers intergÃ©nÃ©rationnels, par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces quartiers ont Ã  la fois un intÃ©rÃªt Ã©cologique, mais aussi de relation sociale. Avec une partie de la population qui veillit et une autre partie de la population qui croit rapidement (pour des raisons Ã©conomiques), nous pensons que nous pouvons organiser nos quartiers de maniÃ¨re Ã  encourager la mixitÃ© sociale, la relation entre personnes Ã¢gÃ©es et jeunes en vivant Ensemble et Autrement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous pensons qu&amp;#8217;il y a une alternative aux EHPAD et qu&amp;#8217;en particulier le maitien des personnes Ã¢gÃ©es dans un environnement au milieu d&amp;#8217;actifs et de jeunes est Ã  la fois une garantie d&amp;#8217;un veillissement dans de meilleures conditions, mais aussi plus humaine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous avons aussi la chance, sur notre territoire, d&amp;#8217;avoir un tissu associatif extrÃªmement actif.
Toutes ces bonnes volontÃ©s ont besoin d&apos;Ãªtre encouragÃ©es.
Il est dÃ©ja trÃ¨s difficile de trouver des bÃ©nÃ©voles, alors que dire lorsque la municipalitÃ© ne s&amp;#8217;engage pas ou, pire, tente de saboter des projets parce qu&amp;#8217;ils sont jugÃ©s trop &quot;populaires&quot; ?
Nous nous appuierons au contraire sur ces associations et nous mettrons en place la transparence dans l&amp;#8217;attribution des subventions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous transformerons aussi nos mairies annexes en maisons de services aux citoyen, de faÃ§on Ã  favoriser l&amp;#8217;interaction, mais aussi aider toutes les personnes en difficultÃ©.
Parfois, il s&amp;#8217;agira de difficultÃ©s de logement, Ã©conomiques, mais aussi parfois des difficultÃ©s dans l&amp;#8217;apprÃ©hension des outils numÃ©riques (nous pensons par exemple Ã  la tÃ©lÃ©-dÃ©claration de revenus).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous pensons aussi Ã  tous les citoyens, en particulier ceux en situation de handicap.
La situation de la ville de Montaigu est catastrophique Ã  cet Ã©gard: impossible pour une personne en fauteuil roulant de faire ses courses en centre-ville.
Nous souhaitons, au contraire, renforcer les centre-villes en les rendant accessibles &lt;strong&gt;pour tous&lt;/strong&gt;, en travaillant avec les petits commerÃ§ants qui font vivre nos villes, plutÃ´t qu&amp;#8217;en dÃ©veloppant, comme Ã  l&amp;#8217;heure actuelle, les grandes surfaces commerciales en pÃ©riphÃ©rie.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, il s&amp;#8217;agit aussi d&amp;#8217;aider notre jeunesse.
Combien de fois avez-vous croisÃ© des jeunes en train de faire du skate sur la voie publique ? Notre majoritÃ© actuelle a prÃ©fÃ©rÃ© offrir une rÃ©duction sur le tarif des terrains aux promoteurs immobiliers, plutÃ´t que d&amp;#8217;investir 80kâ¬ (sur un budget de 16Mâ¬) pour donner Ã  nos jeunes des lieux oÃ¹ s&amp;#8217;amuser. Que dire de l&apos;Ã©tat des pistes cyclables ? Pensez-vous que vos enfants peuvent, en toute sÃ©curitÃ©, partir du collÃ¨ge et se rendre Ã  leur entraÃ®nement de sport Ã  Saint Georges de Montaigu ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, dans une semaine, le 15 Mars, vous devrez choisir vos Ã©lus.
Je me prÃ©sente humblement sur la liste de Vincent MATHIEU, une liste composÃ©e de citoyens impliquÃ©s, d&amp;#8217;horizons et compÃ©tences diffÃ©rents et j&amp;#8217;espÃ¨re Ãªtre bientÃ´t Ã  votre service pour une vie meilleure, Ensemble et Autrement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme l&amp;#8217;a si bient dit Michel PAVAGEAU, le doyen de notre liste, Ã  Commune Nouvelle, Ãquipe Nouvelle !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Chronicles of an introvert remote worker</title>
      <link>https://melix.github.io/blog/2020/01/introvert-remote.html</link>
      <pubDate>Fri, 3 Jan 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2020/01/introvert-remote.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post is the translation in English of the most popular blog post I wrote in October, 2019, which was originally posted in french.
Lots of folks commented they found it useful and that they recognized themselves in the description so I decided to translate it to English.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other day I was listening to &lt;a href=&quot;https://lescastcodeurs.com/2019/09/16/lcc-216-l-episode-ou-on-a-perdu-le-compte/&quot;&gt;Les Cast Codeurs podcast&lt;/a&gt; which mentioned the topic of remote working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some comments made me raise an eyebrow, this post is going to talk about my own experience.
This post is mostly about me and being an introvert.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_remote_working_and_being_an_introvert&quot;&gt;Remote working and being an introvert&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been &lt;em&gt;almost&lt;/em&gt; full-time remote worker for almost 10 years.
I&amp;#8217;m saying &lt;em&gt;almost&lt;/em&gt; because in practice, I&amp;#8217;m moving from time to time for profesional reasons (conferences, meetings).
However, for my daily job, everything is done from home.
Before being a remote worker, I was driving a lot: my job was in Nantes, around 45km from home.
That was about ~90km a day, but more importantly between 2 and 3 hours of commute a day.
The day I switched jobs, working for VMware on the Groovy language, the first shock was that I was recovering those 2 to 3 hours a day.
That&amp;#8217;s a lot of time to spend with your kids (dropping them at school, driving them to sports, &amp;#8230;) or doing housekeeping (fixing, gardening, sports, &amp;#8230;).
I won&amp;#8217;t come back to those advantages because they are mostly known, the only real drawback to me is being capable of handling your own work hours, that is to say, contrary to the belief, not working &lt;em&gt;too much&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The thing I want to talk about is this comment from Antonio GoncalvÃ©s who said:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dump your coffee maker, go out, see people, it&amp;#8217;s important to see other human beings!&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;a href=&quot;https://twitter.com/CedricChampeau/status/1173893698997936130&quot;&gt;made me react&lt;/a&gt; so I wanted to come back to this topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, this advice only works if you live in a city, which is not my case.
I (intentionally) live in the countryside, 5kms from the town center.
A &quot;small coffee break&quot; turns into an expedition in those conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But let&amp;#8217;s come to the core of the topic: &quot;It&amp;#8217;s important to see and talk to human beings&quot;, which relates to the &lt;em&gt;necessity not to be alone&lt;/em&gt;.
This is a topic I care about and resonates with a question I often answered when I&amp;#8217;m talking about remote work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But aren&amp;#8217;t you tired of being alone and not seeing anybody?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Honest answer: &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I understand people who need this, but &lt;strong&gt;don&amp;#8217;t think everybody works like you&lt;/strong&gt; and &lt;em&gt;need&lt;/em&gt; to see other people.
Some folks like me live perfectly well without seeing anybody.
I can spend days alone, without me going mad or missing any social relationship.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m part of this population called the &lt;em&gt;introverts&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;introvert&lt;/em&gt;, contrary to the popular belief, isn&amp;#8217;t antisocial, selfish or without any kind of empathy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;introvert&lt;/em&gt; is someone whose energy is drained by the crowd, by social relationships. It&amp;#8217;s the opposite of an &lt;em&gt;extravert&lt;/em&gt; who needs to see people to recover energy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;introvert&lt;/em&gt; is someone who can&amp;#8217;t stand smalltalk, because they don&amp;#8217;t bring anything to him/her except from draining their energy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;introver&lt;/em&gt; is someone who can talk hours on a topic (s)he&amp;#8217;s passionate about because it&amp;#8217;s &lt;em&gt;worth their energy&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I was a kid I already avoided being in a group of people.
I didn&amp;#8217;t have many friends (but the friends I had back then I still have them today).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I always freaked out at the idea of being in a group where I knew nobody, be it at school, at sport or even family parties.
Even if I &lt;em&gt;knew&lt;/em&gt; someone, being &lt;em&gt;in a group&lt;/em&gt;, having to entertain social relationships was of extreme difficulty (and it still is today, to some extent).
Everything I cared as a child about back then was being &quot;excellent&quot; at school and my parents be proud of me.
This caused me to get some nicknames (&quot;the nerd&quot;), being hassled or even get some not so nice words written on the back of my classroom photographs, for a large part of my childhood.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example, I always refused to go to summer camps (the only experience I got, a week in a stud farm, was so painful to me I still remember it).
I also refused going to snow camps.
However, I &lt;em&gt;did&lt;/em&gt; accept going to England, Ireland and Spain with school, not without fighting myself, because I knew I could learn something out of it, but also because I knew I would be in a small group with a friend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, having to stand in front of the rest of the classroom to recite a poem, or worse, sing, was pure torture to me.
On the contrary, I loved being at the University of Science in Nantes, where I could spend some time with 2 or 3 friends max at the coffee shop, discussing with them.
I didn&amp;#8217;t like much the software engineering school I joined to after that, where I had to be extremely creative to avoid the student integration parties, after-work parties and all those driking games most students were fond of: it was incredibly difficult to be recognized as a person without being excluded because I didn&amp;#8217;t participate in those events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s talk about those &quot;integration&quot; parties. What&amp;#8217;s fun for some, being drunk, &quot;gently&quot; humiliating others, was just disgust and fear for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that I think about it, few people know it, but I spent my whole scolarity in Nantes, not because everything was available there (it was, really), but because I was petrified at the idea of beling &quot;alone&quot; in a new University, an engineering school, somewhere else at the other end of France, &amp;#8230;
I remember a teacher who blamed me for not going in a well known French school despite I had the &quot;capacity&quot; do it.
In retrospect I don&amp;#8217;t think it was a big mistake, I&amp;#8217;m quite happy where I am today!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_i_would_never_hire_someone_like_you&quot;&gt;I would never hire someone like you!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everything I explained may sound surprising from someone who, today, gives talks at conferences, sometimes in front of hundreds of people, which sounds a bit irrealistic.
So what&amp;#8217;s the difference?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well the difference is that when I talk to you in a such a context, I &lt;strong&gt;understand the topic&lt;/strong&gt; (or at least I think I understand it ;)).
I can talk to you openly because I know the questions I will get are directly related to the topic I&amp;#8217;m talking about.
There&amp;#8217;s almost no room for the &lt;em&gt;unknown&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s also for this reason that it&amp;#8217;s still very difficult to me, even today, to reach out to others.
I am still completely incapable of doing small talk.
This goes even beyond that: I&amp;#8217;ve traveled abroad a number of times, multiple times in the US for example, but I &lt;em&gt;never&lt;/em&gt; went outside alone to visit (at best I can walk an hour or two in the neighorhood).
That&amp;#8217;s because doing this drives me outside of my comfort zone: having to talk to people I don&amp;#8217;t know, ordering a meal, asking for directions: all this is draining my energy. It&amp;#8217;s always easy to say you should go out of your comfort zone when doing this is not a trial for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if I know one or two people and that they kindly ask me to join them, in most cases it will be fine and I would appreciate visiting!
Everybody&amp;#8217;s telling me I&amp;#8217;m incredibly lucky to travel.
Well, maybe, but I, for one, hate this, at least I hate it if I have to do this without my family&amp;#8230;
Even going to Paris, realizing how many people live there, feeling like an ant in the anthill, remind me how much I hate this!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a consequence, I avoid as much as I can &quot;parties&quot; like speaker dinners or corporate events.
They are often described as the &lt;em&gt;must do&lt;/em&gt; of networking.
While it&amp;#8217;s true that you can learn a lot in those events, they are also incredibly stressful to me.
When I join them, most of the time I&amp;#8217;m trying to identify someone I know, stick with them but I would often leave early and I have to go to my hotel room alone to recover.
I wouldn&amp;#8217;t necessarily &lt;em&gt;sleep&lt;/em&gt;, as some people think I do: often I would work late in my hotel room, I just need to be &lt;em&gt;alone&lt;/em&gt;.
The most terrifying thing to me in those parties is when conversations become &lt;em&gt;extra-professional&lt;/em&gt; which is something I have no &quot;skill&quot; for.
Some would say I&amp;#8217;m a boring guy, that there&amp;#8217;s no interest in talking to me and that&amp;#8217;s probably right if you&amp;#8217;re looking for someone with an extraordinary life, mine is not that much :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A natural conclusion that some people draw from this is that of course I can&amp;#8217;t be a good team player.
In fact I think that&amp;#8217;s quite the opposite: I value &lt;em&gt;trust&lt;/em&gt; like no one else and I think you can &lt;em&gt;trust&lt;/em&gt; me.
One shouldn&amp;#8217;t mix my incapacity to have simple inter-personal relationships with my capacity to have useful professional interactions, which is another totally different dimension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I explained, I&amp;#8217;m regularly giving talks and I love more than anything else sharing knowledge and information, helping others.
I also enjoy working with people more competent than me so that I can continue to learn and make progress: in this context working in a team is extremely effective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, it&amp;#8217;s not because you&amp;#8217;re working remotely that you don&amp;#8217;t see anyone and that, effectively, you work &lt;em&gt;alone&lt;/em&gt;.
It&amp;#8217;s quite the opposite: we work as a team.
As other teams we do daily standups (via hangouts or Slack), we organize work.
Sometimes we even do face to face meetings or leverage conferences to meet together and do some work.
So it&amp;#8217;s not because you&amp;#8217;re an introvert that it&amp;#8217;s a problem: I think my colleagues would tell you that it works pretty well actually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In short, don&amp;#8217;t be afraid of this aspect: being alone is not a problem for everyone. Maybe it is for you, but definitely not for everyone.
On the opposite, being alone can also boost productivity: no interruption, no useless meetings, ability to focus on a problem for hours etc&amp;#8230;
Being introvert doesn&amp;#8217;t mean either that someone is not capable of working in a team: it doesn&amp;#8217;t prevent &lt;em&gt;at all&lt;/em&gt; from helping others, colleagues or customers.
On the contrary, the professional relationship is focused.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So how does it work in practice?
At Gradle, almost everybody is working remotely.
For the socializing aspect, we have an &lt;em&gt;optional&lt;/em&gt; weekly meeting, called &quot;coffee time&quot;, that anyone willing to can join and chat about extra-work topics.
Some need this, I don&amp;#8217;t: the good thing is that we recognize not everybody&amp;#8217;s the same.
Actually I would be in difficulty to join this meeting and know &lt;em&gt;what&lt;/em&gt; to talk about.
Sometimes I even try to avoid being the first one joining a remote call to avoid having to do some small talk because I&amp;#8217;m so uncomfortable with this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, again, talk to me about a topic I know about or that I&amp;#8217;m passionate about. Ask me about a problem to solve, ask me about helping others and I&amp;#8217;ll be happy to do so because there&amp;#8217;s no room for the unknown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly if we meet in person at a conference and that you wish to talk to me, go ahead: it&amp;#8217;s very likely I will enjoy our conversation: I had several times the opportunity to talk to very famous folks of the Java community (James Gosling, Brian Goetz, Mark Reinholds, &amp;#8230;) and so many others but I just &lt;em&gt;couldn&amp;#8217;t&lt;/em&gt;, it was, physically, impossible to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact I have so much difficulties coming to someone and opening a discussion that if you do the first step it&amp;#8217;s &lt;em&gt;much&lt;/em&gt; easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So: don&amp;#8217;t be surprised if I walk the area 3 times in a row without asking for directions. Don&amp;#8217;t be surprised if I don&amp;#8217;t phone or text you. I&amp;#8217;m not ignoring you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_don_t_be_ashamed_of_being_an_introvert_but_make_others_understand_what_it_means&quot;&gt;Don&amp;#8217;t be ashamed of being an introvert but make others understand what it means&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last, in a &lt;a href=&quot;https://twitter.com/CedricChampeau/status/1173893698997936130&quot;&gt;Tweet&lt;/a&gt; I was saying that I was &quot;healing myself&quot;.
That&amp;#8217;s both true and false at the same time.
It&amp;#8217;s true because I&amp;#8217;m aware of the importance of the ignorance of a lot of people about this condition of mine, so I try to work, for example, speaking with others in different contexts.
I am for example the secretary of my karate club, which forces me to talk to people I don&amp;#8217;t know.
I am also the coach of my younger boy&amp;#8217;s (10 yo) basketball team, which I enjoy very much doing: it&amp;#8217;s an activity which allows both spending time with my kid, requires some public communication skills and is very gratifying (seeing kids happy to play, win a match, share this with their parents etc&amp;#8230;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least it&amp;#8217;s also a message for my son who I know feels very much like me: he also has difficulties speaking to others and I know he works hard to get accepted. He&amp;#8217;s also so proud when he gets recognition from his community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It took me years to put a name on what I am: I&amp;#8217;m an &lt;em&gt;introvert&lt;/em&gt; and often I have to fight myself not to be ashamed of this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Gradle myth busting: scripting</title>
      <link>https://melix.github.io/blog/2019/11/gradle-scripting.html</link>
      <pubDate>Sun, 3 Nov 2019 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2019/11/gradle-scripting.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t particularly enjoy Twitter as a medium for debating (no surprise my bio mentions &quot;this is not a support channel&quot;).
This happened again this week, I got caught in a Maven vs Gradle debate, one more, after I replied to &lt;a href=&quot;https://twitter.com/lukaseder/status/1189889509254713344&quot;&gt;Lukas Eder&lt;/a&gt; that his tweet was a call for FUD.
And it did happen: no surprise, when you submit something like that, the only answers you&amp;#8217;ll get are either people going in your direction &quot;oh yeah, Gradle sucks and here is my personal experience&quot; or similar, this is just human nature.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_good_old_debate&quot;&gt;The good old debate&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the end, most of the answers cycle around the same, good old, debate: Gradle uses scripting (Groovy or Kotlin) vs Maven uses declarative.
You&amp;#8217;ll aways find people telling you that XML is better because it locks you down, its fully declarative (&lt;a href=&quot;https://maven.apache.org/plugins/maven-antrun-plugin/&quot;&gt;is it&lt;/a&gt;, really?) and everybody is forced to do the same.
I don&amp;#8217;t counter those arguments, this is a strength of Maven, but it also comes with a number of drawbacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I promised some of the folks in the conversation some answers (please look down for direct answers to tweets), so here they are. I&amp;#8217;m answering on a blog post because again Twitter is not good for this, it&amp;#8217;s causing a lot of misunderstandings, because you get into multiple, parallel conversations with different people who accidentally get mentioned, and get scuds fired at you without even having time to answer&amp;#8230; Even a blog post is not enough, there&amp;#8217;s so much to say on this topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, on the so called &quot;declarative vs imperative&quot; model, I will always disagree on this dichotomy. I disagree that Gradle isn&amp;#8217;t declarative. It&amp;#8217;s as declarative as you want it to be. Take this build file I wrote recently, which is an &lt;em&gt;Asciidoctor Reveal.js presentation template&lt;/em&gt; (it allows writing slide decks with Asciidoctor and reveal.js). Here&amp;#8217;s what my build file looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint kotlin language-kotlin&quot;&gt;&lt;code&gt;plugins {
    id(&quot;org.gradle.presentation.asciidoctor&quot;)
}

presentation {
    githubUserName.set(&quot;melix&quot;)
}

dependencies {
    asciidoctor(&quot;org.asciidoctor:asciidoctorj-diagram:1.5.11&quot;)
}

tasks {
    asciidoctor {
        requires(&quot;asciidoctor-diagram&quot;)
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wouldn&amp;#8217;t particularly say this is imperative. It looks &lt;em&gt;very declarative&lt;/em&gt; to me. Concise too. The fact it uses an &lt;em&gt;imperative language&lt;/em&gt; is orthogonal, but it does, however, create the ability to write imperative code in the build.
Note, however, that a dependency was declared for &lt;em&gt;asciidoctor&lt;/em&gt;. This is a major, and probably the most important, difference with Maven: &lt;em&gt;compile&lt;/em&gt; or &lt;em&gt;runtime&lt;/em&gt; doesn&amp;#8217;t make sense here. We declare a dependency for &lt;em&gt;asciidoctor rendering&lt;/em&gt;. There&amp;#8217;s no Java library being built here, it&amp;#8217;s a presentation. Gradle lets you model precisely &lt;em&gt;what you build&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, in the end, I think what matters is not &lt;em&gt;declarative&lt;/em&gt; vs &lt;em&gt;scripting&lt;/em&gt;. I think what people really want is to reduce the risks of writing bad things. Locking down using XML is &lt;em&gt;one&lt;/em&gt; way to achieve this, but it&amp;#8217;s not the only one. For example, Gradle build scripts &lt;a href=&quot;https://github.com/nebula-plugins/gradle-lint-plugin&quot;&gt;may be linted&lt;/a&gt;. In other words, you can apply on a Gradle build the same tooling you are used to work with when dealing with your own code: checkstyle, findbugs, &amp;#8230; You don&amp;#8217;t &lt;em&gt;have to&lt;/em&gt;, but you can.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The consequence is that yes, there are many different ways you can layout your build with Gradle. This is not different from how you can layout your code in a project: we don&amp;#8217;t tell you in which package you should put your beans, services, &amp;#8230; However, there&amp;#8217;s a big misconception that I&amp;#8217;d like to fight:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, for a Java project, Gradle follows the same conventions as Maven.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s as simple as that. Sources will be in &lt;code&gt;src/main/java&lt;/code&gt;. Tests will be in &lt;code&gt;src/test/java&lt;/code&gt;. Gradle gives you the freedom to diverge from this convention, but this is &lt;em&gt;not&lt;/em&gt; encouraged, and to be honest, I&amp;#8217;ve almost never seen any build diverging from those conventions. On rare occasions, those were actually builds migrated from &lt;em&gt;other&lt;/em&gt; build systems (in particular Ant) where at the time there wasn&amp;#8217;t any convention. Gradle offers the flexibility to reuse an existing layout without much hassle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gradle_is_too_flexible&quot;&gt;Gradle is too flexible?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all, the argument that &quot;Gradle is too flexible&quot; is a fallacy.
It&amp;#8217;s all about good engineering practices, putting the right tools in place, and this is nothing different from any engineering work we do everyday.
If you can do it for your code, you can do it for your build.
The interesting thing is &lt;em&gt;why you think you shouldn&amp;#8217;t have the same quality expectation levels for your build as you have for your code&lt;/em&gt;.
Often the answer is just &quot;I don&amp;#8217;t care much about the build, I&amp;#8217;m writing code, this is what I&amp;#8217;m paid for&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And this is where the discussion becomes interesting, because I think this is a bias that lots of developers have.
They don&amp;#8217;t even realize how much time they are losing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tell me, how likely is it that you change your build scripts, compared to the number of times you&amp;#8217;re effectively going to run &lt;code&gt;mvn clean install&lt;/code&gt; or &lt;code&gt;gradle test&lt;/code&gt;?
The reality is that you&amp;#8217;re &lt;em&gt;running the build&lt;/em&gt; much more often that you change it.
Therefore, &lt;em&gt;correctness&lt;/em&gt;, incremental builds, incremental compilation, compile avoidance, task output caching, are far more important to developer productivity than the declarativeness aspect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sure pure declarativeness is a good thing and this is why I encourage Gradle users to write nice, synthetic build files, but this is &lt;em&gt;not&lt;/em&gt; the most important aspect for &lt;a href=&quot;https://gradle.com/developer-productivity-engineering/&quot;&gt;developer productivity&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My point is therefore that if you only focus on the &lt;em&gt;surface&lt;/em&gt;, that is to say the language used to express the build (XML vs Groovy/Kotlin), then you&amp;#8217;re missing the most important part to me, which is the underlying Gradle model, far more advanced than what you have in other tools. The Gradle API surfaces this model and has a number of advantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;task&lt;/em&gt; can be seen as a &lt;em&gt;function&lt;/em&gt;. It &lt;em&gt;declares&lt;/em&gt; inputs and outputs. For the same inputs, the output are always the same: this provides up-to-date checking and cache-ability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A task inputs can be another task outputs. This provides &lt;em&gt;implicit dependencies&lt;/em&gt;: Gradle knows that if you want to run &quot;test&quot;, you have to compile first, but it also knows that whatever else is an input to the tests need to be executed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a consequence, I already wrote about why &lt;a href=&quot;https://melix.github.io/blog/2018/09/gradle-lifecycle.html&quot;&gt;it&amp;#8217;s wrong to think that Gradle doesn&amp;#8217;t have lifecycle tasks&lt;/a&gt;. In fact, Gradle has them, but is also &lt;em&gt;significantly more precise&lt;/em&gt;. The &quot;phase&quot; approach of Maven is way to coarse: it&amp;#8217;s doomed to execute too much, prevents smart parallelism, and leads to dirty workarounds (&lt;code&gt;-x ....&lt;/code&gt; on the CLI to avoid things you know are not necessary).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, say you want to test your application on different JDKs and have a single build execute tests for all target JVMs, which is different from the JVM which runs the build tool. With a scripting approach like Gradle, this is totally doable. I won&amp;#8217;t say easy because we can definitely do better to make this use case better, but the underlying model makes it quite simple. You don&amp;#8217;t want to &lt;em&gt;rebuild&lt;/em&gt; your application for each target VM. All you want is to &lt;em&gt;test&lt;/em&gt; on different platforms, and therefore the only step should be a different target VM for test execution. Tools like Maven force you into arbitrary things like defining Maven profiles, and force you into rebuilding everything. This is a giant waste of time for something you don&amp;#8217;t need!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a different topic, this is no surprise that Gradle can build for different ecosystems: Java, Scala, C++, Kotlin, Kotlin Native, Python, &amp;#8230; The underlying infrastructure makes it possible. Even for a single ecosystem, Gradle can declare what the difference between a &lt;a href=&quot;https://docs.gradle.org/6.0-rc-2/userguide/java_library_plugin.html&quot;&gt;Java Library&lt;/a&gt;, a &lt;a href=&quot;https://docs.gradle.org/6.0-rc-2/userguide/java_platform_plugin.html&quot;&gt;Java Platform&lt;/a&gt; or an &lt;a href=&quot;https://docs.gradle.org/6.0-rc-2/userguide/application_plugin.html&quot;&gt;application&lt;/a&gt; is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could talk hours about why it&amp;#8217;s important to model properly software, and actually with the release of Gradle 6 we&amp;#8217;ll have a series of blog posts explaining why we think it&amp;#8217;s a game changer in terms of dependency management. If you&amp;#8217;re tired of having to fix the same &quot;multiple slf4j bindings&quot; in each and every project, tired of Guava being upgraded from &lt;code&gt;jre&lt;/code&gt; to &lt;code&gt;android&lt;/code&gt;, frustrated by incompatibilities of Scala 2.11 and 2.12 dependencies, tired of not knowing which of those Maven optional dependencies is important for you to add, you&amp;#8217;ll understand what I mean.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_direct_answer_to_some_tweets&quot;&gt;Direct answer to some tweets&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll try to answer more direct questions in this section. Sorry if I missed yours, I got quite a few comments/answers&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would sacrifice caches, dependency locks and better plugins to version to have a declarative build process instead of an imperative one. Give me a declarative Gradle and I will love it.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, I think this is the wrong tradeoff. Given that you run the build way more often that you change it, declarativeness (that you &lt;em&gt;can&lt;/em&gt; have with Gradle) shouldn&amp;#8217;t be the goal. Your goal should be to reduce your build times, make your build reproducible, improve your developer productivity. Declarativeness is &lt;em&gt;not a goal&lt;/em&gt;, it&amp;#8217;s at best a &lt;em&gt;mean&lt;/em&gt;, but not sufficient by itself. A declarative Gradle, whatever that means, would help you reduce the cognitive overhead, but wouldn&amp;#8217;t help you better model what your application needs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;make a one liner the ability to publish on different repos the snapshot and release artifacts. The way it was done on Gradle 4.x was broken on 5.x and the only way we found to do it is a horrible hack&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a &lt;a href=&quot;https://gradle.com/blog/dependency-management-with-gradle-part-3-publishing-and-release-strategies/&quot;&gt;webinar about publishing&lt;/a&gt;. Publishing is not complicated with Gradle. It used to be poorly documented, and the old publishing plugins didn&amp;#8217;t help. But publishing to a snapshot repository should be trivial already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some people will prefer to do their own way, some people will prefer to have a less expressive tool that will produce similar build processes on their projects. Gradle give you the former, Maven the latter. As I say, a matter of taste.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A less expressive tool reduces the risks of writing &lt;em&gt;bad builds&lt;/em&gt;. It doesn&amp;#8217;t help, however, in developing correct, reproducible, fast builds. An, again, I disagree that Gradle leads to &quot;custom builds&quot; everywhere. Most people stick to the defaults and are very happy with them. The more complex builds you find in the wild are those which have indeed very specific needs, or need to be tweaked for performance, producing more artifacts, combinations of artifacts or testing. Things that you can&amp;#8217;t easily do with Maven profiles, for example, because profiles are &lt;em&gt;adhoc&lt;/em&gt; solutions which do not combine well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gradle tries to create a fake sense of declarativeness, but it is just an illusion.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not an illusion. Gradle has a clear separation between its configuration model and execution model. All tasks have declared inputs. The plugins create either new tasks or &lt;em&gt;conventions&lt;/em&gt;. This is not an illusion, this is the reality. Now, because you &lt;em&gt;can&lt;/em&gt; write &lt;code&gt;if&lt;/code&gt; or loops doesn&amp;#8217;t mean it&amp;#8217;s not declarative, it&amp;#8217;s imperative-declarativeness. And yes, you can end up with giant build scripts with &quot;code&quot; inside. If you have, do yourself a favor, &lt;em&gt;refactor&lt;/em&gt; your build like you would with your code, because no one should tolerate this. Use &lt;code&gt;buildSrc&lt;/code&gt;, this is your friend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think library dependencies is not correctly supported by IDEs and Java modules are better.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s not correct. We&amp;#8217;ve been using the native Gradle IntelliJ support for years at Gradle, with &lt;em&gt;api&lt;/em&gt; and &lt;em&gt;implementation&lt;/em&gt; separation, and it works exactly like it should. Implementation dependencies are hidden from consumers, like they should. If you don&amp;#8217;t see this, either you didn&amp;#8217;t declare the dependencies or you have a bug in the IDE, in which case it needs to be reported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even worst, Gradle don&amp;#8217;t have an official plugin to deal with module-info. there was an old post that says it is not necessay with Gradle because lib dependencies were better (they don&amp;#8217;t)&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t think anyone said you don&amp;#8217;t need &lt;code&gt;module-info&lt;/code&gt;. There are different things in play:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;separation of API and implementation: Gradle supports this, and it maps to &lt;code&gt;requires&lt;/code&gt; vs &lt;code&gt;requires transitive&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;declaration of public API packages: Gradle &lt;em&gt;used to have&lt;/em&gt; this with the deprecated &quot;software model&quot;. It still has to be backported to the current configuration model. For this, &lt;code&gt;module-info&lt;/code&gt; works fine but it forces you into using the &quot;modular world&quot;, which a lot of libraries, frameworks and IDEs are not ready for.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;declaration of services: Gradle doesn&amp;#8217;t support this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Can you use modules with Gradle? Yes, there&amp;#8217;s a quite good &lt;a href=&quot;https://github.com/java9-modularity/gradle-modules-plugin&quot;&gt;plugin&lt;/a&gt; to do it. We are planning to support modules and modularity in general better in Gradle, but not short term, because we have bigger pain to solve for our users first. It doesn&amp;#8217;t mean we don&amp;#8217;t consider this important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t get why Gradle allow you to explain what your app is better than Maven. In fact I think it is more difficult to explain it on a script that descriptivelly.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; the question is what Gradle models better than Maven. A good example here is &lt;code&gt;api&lt;/code&gt; vs &lt;code&gt;implementation&lt;/code&gt; dependencies. Because Maven uses the &lt;em&gt;same descriptor (pom.xml)&lt;/em&gt; for the producer and the consumer, a dependency declared in the &lt;code&gt;&amp;lt;compile&amp;gt;&lt;/code&gt; scope ends up on the compile classpath of the consumers. This is &lt;em&gt;leaking internal implementation details&lt;/em&gt; to consumers, which is very bad because it makes it very hard to evolve libraries, because changing an internal dependency would break consumers which accidentally started depending on your own transitives. This is &lt;em&gt;just&lt;/em&gt; an example of course, there are many other differences (like, why we consider that &lt;code&gt;exclude&lt;/code&gt; is a bad workaround in general, more on this topic in Gradle 6, if you want to read &lt;a href=&quot;https://docs.gradle.org/current/userguide/introduction_dependency_management.html&quot;&gt;our docs&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The builds Iâve seen have been very spaghettish and clearly copy-and-pasted together un-understood recipes from SO.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, there are bad builds out there. With Gradle it&amp;#8217;s frequent for quite old builds from early adopters. More recent builds tend to be much cleaner, because we made a significant effort in guides, getting started samples, documentation. You&amp;#8217;ll always find bad things, and it should be encouraged to fix. On this topic, tools like &lt;a href=&quot;https://scans.gradle.com&quot;&gt;build scans&lt;/a&gt; really help. And copy/pasting from SO is indeed a bad thing. If you copy and paste without understanding what it does, well, bad things can happen&amp;#8230; That said I&amp;#8217;ve seen very scary Maven builds too, and believe me or not, some of our customers wouldn&amp;#8217;t be proud to show you their Maven builds. It&amp;#8217;s the &quot;personal experience fallacy&quot;. I&amp;#8217;ve experienced very clean Gradle builds, you&amp;#8217;ve experienced very bad Gradle builds. I&amp;#8217;ve also written bad Gradle builds, which I dramatically improved, making them more correct, faster, &amp;#8230; Gradle is like any other technology: learn it and you can understand what it brings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gradle performance/caching are very attractive but the scripting possibility is a deal breaker. A Â« declarative-only Â» Gradle would be perfect for people like me.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again I think &quot;declarative&quot; is the wrong term here. Locked down to reduce the risks of doing bad things is what you want. It doesn&amp;#8217;t matter if it&amp;#8217;s Kotlin, Groovy, XML or whatever else. It doesn&amp;#8217;t matter if you can use &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loops. What matters is &lt;em&gt;what you can express&lt;/em&gt;, and &lt;em&gt;what should be limited&lt;/em&gt;. It&amp;#8217;s all good engineering that we must share within the industry, find the best patterns, discourage the bad ones. There are quite a few things in the Android world (which uses Gradle) in this direction. We, at Gradle, should do more, but it&amp;#8217;s always a matter of priorities: fixing the most important user pain first. By the way, we provide a Maven build cache with Gradle Enterprise. That is to say, the ability to cache Maven builds using Gradle Enterprise. However, this is limited to &quot;clean builds&quot; (which Maven users are used to do in any case), because of the limitations of the Maven execution model (no knowledge of what each plugin or mojo does, where it writes files, &amp;#8230;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IMHO the biggest feature of Gradle that Maven doesn&amp;#8217;t have is the ability to change the version of the project&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, this is just an accidental example of the interest of having access to the API in a build script. It offers a number of options for the release process, but that&amp;#8217;s not the only one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My only complain about @gradle is how it is unnecessarily complex to deploy a multi-module project to central. Too much copy &amp;amp; paste, or you need to make an init script, which I still haven&amp;#8217;t managed to do.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically the problem is not &quot;how to deploy a multi-module project to Central&quot;, but rather, how do I avoid duplicating configuration between scripts. This is what &lt;code&gt;buildSrc&lt;/code&gt; is for. As soon as you have repetition, then, it means a plugin makes sense. &lt;code&gt;buildSrc&lt;/code&gt; can be seen as &quot;local plugins&quot;, and this is where you should write your common code. Then each project applies a plugin to publish. This is a &lt;em&gt;composition&lt;/em&gt; model, as opposed to the &lt;em&gt;inheritance&lt;/em&gt; model of Maven.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like all those (caching, incrementality, &amp;#8230;) , in theory, but for my needs they are more complexity than feature&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t think those are complexity. A task declares its inputs. If you do, you benefit from up-to-date checking, and with a bit more configuration, caching. You don&amp;#8217;t &lt;em&gt;have to&lt;/em&gt;. If you don&amp;#8217;t declare the inputs/outputs, you&amp;#8217;re back to the &quot;Maven&quot; approach where the build tools knows nothing about what a task does, at the difference that Gradle knows that it knows nothing, so can be a bit smarter. As soon as you start declaring your inputs, you benefit from more. It&amp;#8217;s more work, for sure, but it&amp;#8217;s not that complex and the benefit is huge.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
